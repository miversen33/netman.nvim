describe("Main core init", function()
    _G.netman = require('netman')
    after_each(function()
        vim.api.nvim_command('augroup Netman')
        vim.api.nvim_command('autocmd!')
        vim.api.nvim_command('augroup END')
        vim.api.nvim_command('augroup! Netman')
        vim.api.nvim_command('comclear')
        vim.g.loaded_netman = nil
        vim.g.netman_remotetools_setup = nil
        vim.g.loaded_netrwPlugin = nil
        vim.g.loaded_netrw = nil
    end)
    it("should accept an empty setup table", function()
        assert.is_nil(_G.netman.setup(), "Netman init setup failed")
    end)
    pending("should accept a custom setup table")
    describe("disable netrw", function()
        it("should disable netrw", function()
            assert.is_nil(_G.netman.setup(), "Netman setup failed")
            assert.is.equal(vim.g.loaded_netrw, 1, "Netman failed to override netrw loaded flag")
            assert.is.equal(vim.g.loaded_netrwPlugin, 1, "Netman failed to override netrw plugin flag")
            assert.is_not_nil(vim.api.nvim_exec('augroup', true):match('Netman'), "Netman failed to set augroup!")
        end)
    end)
    describe("enable netrw", function()
        it("should enable netrw", function()
            assert.is_nil(_G.netman.setup({allow_netrw=true}), "Netman setup failed")
            assert.is_nil(vim.g.loaded_netrw, "Netman overrode netrw loaded flag")
            assert.is_nil(vim.g.loaded_netrwPlugin, "Netman overrode netrw plugin loaded flag")
            assert.is_nil(vim.api.nvim_exec('augroup', true):match('Netman'), "Netman set augroup")
        end)
    end)
    it("should set netman in debug mode", function()
        assert.is_nil(_G.netman.setup({debug = true}), "Netman init setup failed")
    end)
end)
describe("Main core function tests", function()
    _G.netman = require('netman')
    before_each(function()
        _G.netman.setup()
    end)
    describe("read", function()
        it("command should be accessible", function()
            assert.is_not_nil(vim.api.nvim_exec('filter Nmread command', true):match('Nmread'))
        end)
        it("read function should exist", function()
            assert.is_not_nil(_G.netman.read, "Netman read function is missing")
        end)
    end)
    describe("write", function()
        it("command should be accessible", function()
            assert.is_not_nil(vim.api.nvim_exec('filter Nmwrite command', true):match('Nmwrite'))
        end)
        it("write function should exist", function()
            assert.is_nil(_G.netman.setup(), "Netman setup failed")
            assert.is_not_nil(_G.netman.write, "Netman write function is missing")
        end)
    end)
    describe("delete", function()
        it("command should be accessible", function()
            assert.is_not_nil(vim.api.nvim_exec('filter Nmdelete command', true):match('Nmdelete'))
        end)
        it("delete function should exist", function()
            assert.is_not_nil(_G.netman.delete, "Netman delete function is missing")
        end)
    end)
    describe("create", function()
        it("command should be accessible", function()
            assert.is_not_nil(vim.api.nvim_exec('filter Nmcreate command', true):match('Nmcreate'))
        end)
        it("create function should exist", function()
            assert.is_nil(_G.netman.setup(), "Netman setup failed")
            assert.is_not_nil(_G.netman.create, "Netman create function is missing")
        end)
    end)
    describe("browse", function()
        it("command should be accessible", function()
            assert.is_not_nil(vim.api.nvim_exec('filter Nmbrowse command', true):match('Nmbrowse'))
        end)
        it("browse function should exist", function()
            assert.is_not_nil(_G.netman.browse, "Netman browse function is missing")
        end)
    end)
    describe("log generation", function()
        it("command should be accessible", function()
            assert.is_not_nil(vim.api.nvim_exec('filter Nmlogs command', true):match('Nmlogs'))
        end)
    end)
    describe("provider", function()
        it("command should be accessible", function()
            assert.is_not_nil(vim.api.nvim_exec('filter NmloadProvider command', true):match('NmloadProvider'))
        end)
    end)
end)